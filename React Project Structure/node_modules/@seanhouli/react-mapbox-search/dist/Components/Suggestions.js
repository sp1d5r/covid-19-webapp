"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Suggestion = _interopRequireDefault(require("./Suggestion"));

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  display: ", ";\n  z-index: 9999;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border-top: none;\n  border-color: #d3d3d3;\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var Wrapper = _styledComponents["default"].span(_templateObject(), function (_ref) {
  var hasResults = _ref.hasResults;
  return hasResults ? "flex" : "none";
});

var SuggestionsList = _styledComponents["default"].div(_templateObject2());

var Suggestions = function Suggestions(_ref2) {
  var places = _ref2.places,
      hasResults = _ref2.hasResults,
      clickHandler = _ref2.clickHandler,
      cursorIdx = _ref2.cursorIdx,
      mouseInSuggestions = _ref2.mouseInSuggestions,
      getMouseInSuggestions = _ref2.getMouseInSuggestions,
      selectColor = _ref2.selectColor,
      isTouch = _ref2.isTouch;

  var handleMouseEnter = function handleMouseEnter() {
    getMouseInSuggestions(true);
  };

  var handleMouseLeave = function handleMouseLeave() {
    getMouseInSuggestions(false);
  };

  return _react["default"].createElement(Wrapper, {
    hasResults: hasResults
  }, _react["default"].createElement(SuggestionsList, {
    onMouseEnter: !isTouch && handleMouseEnter,
    onMouseLeave: !isTouch && handleMouseLeave
  }, places.map(function (place, idx) {
    return _react["default"].createElement(_Suggestion["default"], {
      selectColor: selectColor,
      mouseInSuggestions: mouseInSuggestions,
      idx: idx,
      isTouch: isTouch,
      cursorIdx: cursorIdx,
      clickHandler: clickHandler,
      key: place.id,
      place: place
    });
  })));
};

var _default = Suggestions;
exports["default"] = _default;